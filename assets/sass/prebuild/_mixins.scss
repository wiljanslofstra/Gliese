@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  } @else {
    font-size: $fs-font-size;
  }
}

// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
  @include user-select(none);

  $burger-height: $height;
  $burger-gutter: $gutter;

  position: relative;
  margin-top: $height + $gutter;
  margin-bottom: $height + $gutter;

  &,
  &:before,
  &:after {
    @include transition-property(background-color, transform);
    @include transition-duration($transition-duration);

    display: block;
    width: $width;
    height: $height;
    background-color: $color;
    @if $border-radius != 0 {
      border-radius: $border-radius;
    }
  }

  &:before,
  &:after {
    position: absolute;
    content: '';
  }

  &:before {
    top: -($height + $gutter);
  }

  &:after {
    top: $height + $gutter;
  }
}

// Burger animations
@mixin burger-to-cross {
  &.is-open {
    background-color: transparent;

    &:before {
      @include transform(translateY($burger-gutter + $burger-height) rotate(45deg));
    }

    &:after {
      @include transform(translateY(-($burger-gutter + $burger-height)) rotate(-45deg));
    }
  }
}

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media (min-width: #{inspect(map-get($breakpoints, $name))}) {
      @content;
    }
  }
}

@mixin center-h {
  @include transform(translateY(-50%));
  position: relative;
  top: 50%;
}

@mixin n-items($n) {
  &:first-child {
    &:nth-last-child(#{$n}),
    &:nth-last-child(#{$n}) ~ & {
      @content;
    }
  }
}
