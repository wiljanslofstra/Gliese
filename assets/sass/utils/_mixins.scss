@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }

    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }

      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: nth($fs-font-size, 1);

    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }

  @else {
    font-size: $fs-font-size;
  }
}

// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;

  position: relative;
  margin-top: $height + $gutter;
  margin-bottom: $height + $gutter;

  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  &,
  &:before,
  &:after {
    display: block;
    width: $width;
    height: $height;
    background-color: $color;

    @if $border-radius != 0 {
      border-radius: $border-radius;
    }

    -webkit-transition-property: background-color, -webkit-transform;
    transition-property: background-color, transform;

    -webkit-transition-duration: $transition-duration;
    transition-duration: $transition-duration;
  }

  &:before,
  &:after {
    position: absolute;
    content: '';
  }

  &:before {
    top: -($height + $gutter);
  }

  &:after {
    top: $height + $gutter;
  }
}

// Burger animations
@mixin burger-to-cross {
  & {
    background-color: transparent;
  }

  &:before {
    -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    transform: translateY($burger-gutter + $burger-height) rotate(45deg);
  }

  &:after {
    -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
  }
}

@mixin add-icon($icon, $position: 'before', $replace: false) {
  // If we're replacing the text, set font-size to 0
  @if $replace {
    font-size: 0;
  }
  // Pseudo-element properties
  &:#{$position} {
    @extend %icon;
    @extend .icon-#{$icon};

    @if $replace {
      font-size: 1rem;
    }

    @content;
  }
}

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    $bp: inspect(map-get($breakpoints, $name));

    @media (min-width: #{$bp}) {
      @content;
    }
  }

  @else {
    @warn 'Couldn\t find a breakpoint named `#{$name}`.';
  }
}

@mixin center-h {
  position: relative;
  top: 50%;

  @include transform(translateY(-50%));
}

@mixin n-items($n) {
  &:first-child:nth-last-child(#{$n}),
  &:first-child:nth-last-child(#{$n}) ~ & {
    @content;
  }
}
